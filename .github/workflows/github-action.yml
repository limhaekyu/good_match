# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: good_match
  BUCKET_NAME: good-match-bucket
  CODE_DEPLOY_APP_NAME: good-match
  DEPLOYMENT_GROUP_NAME: good-match-deploy

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest
    
    # Taskd의 Sequence지정
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Java JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
                ~/.gradle/caches
                ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
                ${{ runner.os }}-gradle-
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: application.yml 만들기
        run: touch ./src/main/resources/application.yml
        
      - name: application.yml 내용 채우기
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
        
      - name: cat application.yml
        run: cat ./src/main/resources/application.yml
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
      
      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
        
      - name: Cleanup Gradle Cache
        if: ${{ always() }}
        run: |
            rm -f ~/.gradle/caches/moules-2/modules-2.lock
            rm -f ~/.gradle/caches/modules-2/gc.properties
        
      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash
      
      # AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      # S3 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to S3
#         run:
#           aws deploy push \
#             --application-name $CODE_DEPLOY_APP_NAME \
#             --s3-location s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip \
#             --ignore-hidden-files \
#             --source .
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Code Deploy
#         run:
#           aws deploy create-deployment \
#             --application-name $CODE_DEPLOY_APP_NAME \
#             --deployment-config-name CodeDeployDefault.AllAtOnce \
#             --deployment-group-name $DEPLOYMENT_GROUP_NAME \
#             --s3-location bucket=$S3_BUCKET_NAME,key=$PROJECT_NAME/$GITHUB_SHA.zip,bundleType=zip
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
